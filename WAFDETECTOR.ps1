<#
.SYNOPSIS
    WAF Detector - A PowerShell tool to detect Web Application Firewalls
.DESCRIPTION
    Combines techniques from Wappalyzer and wafw00f to detect and identify 
    Web Application Firewalls (WAFs) protecting web applications.
.PARAMETER Url
    The URL of the website to scan for WAFs
.PARAMETER OutputFile
    Optional: Path to save the results to a file
.EXAMPLE
    .\WAF-Detector.ps1 -Url https://example.com
.EXAMPLE
    .\WAF-Detector.ps1 -Url https://example.com -OutputFile results.json
.NOTES
    Author: Script Generator
    Version: 1.0
    Date: March 31, 2025
#>

param (
    [Parameter(Mandatory = $true)]
    [string]$Url,
    
    [Parameter(Mandatory = $false)]
    [string]$OutputFile
)

# Load required assemblies
Add-Type -AssemblyName System.Web
Add-Type -AssemblyName System.Net.Http

function Test-Url {
    param (
        [string]$Url
    )
    
    # Check if URL is valid
    try {
        $uri = New-Object System.Uri($Url)
        if (!($uri.Scheme -eq "http" -or $uri.Scheme -eq "https")) {
            throw "Invalid URL scheme. Only HTTP and HTTPS are supported."
        }
        return $true
    }
    catch {
        Write-Error "Invalid URL format: $_"
        return $false
    }
}

function Get-WebContent {
    param (
        [string]$Url
    )
    
    try {
        $client = New-Object System.Net.Http.HttpClient
        $client.DefaultRequestHeaders.UserAgent.ParseAdd("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36")
        $client.DefaultRequestHeaders.Accept.ParseAdd("text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8")
        $client.DefaultRequestHeaders.AcceptLanguage.ParseAdd("en-US,en;q=0.5")
        
        # Set timeout to 30 seconds
        $client.Timeout = [System.TimeSpan]::FromSeconds(30)
        
        $response = $client.GetAsync($Url).Result
        $content = $response.Content.ReadAsStringAsync().Result
        $headers = $response.Headers
        
        # Create custom object with response data
        $result = [PSCustomObject]@{
            StatusCode = [int]$response.StatusCode
            Content = $content
            Headers = @{}
        }
        
        # Add headers to result
        foreach ($header in $headers) {
            $headerName = $header.Key
            $headerValue = $header.Value -join '; '
            $result.Headers[$headerName] = $headerValue
        }
        
        # Add content headers
        foreach ($header in $response.Content.Headers) {
            $headerName = $header.Key
            $headerValue = $header.Value -join '; '
            $result.Headers[$headerName] = $headerValue
        }
        
        return $result
    }
    catch {
        Write-Error "Error fetching URL: $_"
        return $null
    }
    finally {
        if ($client) {
            $client.Dispose()
        }
    }
}

function Get-WafSignatures {
    # This function returns WAF detection signatures similar to those used in wafw00f
    # Adapted and simplified from wafw00f patterns
    
    return @{
        "Cloudflare" = @{
            Headers = @{
                "Server" = "cloudflare"
                "CF-RAY" = ".*"
                "cf-cache-status" = ".*"
            }
            Cookies = @{
                "__cfduid" = ".*"
                "__cf_bm" = ".*"
            }
            ErrorPage = "Ray ID: [a-f0-9]{16}"
        }
        "AWS WAF" = @{
            Headers = @{
                "X-AMZ-ID" = ".*"
                "X-AMZ-REQUEST-ID" = ".*"
            }
            ErrorPage = "Reference ID: [0-9a-zA-Z]{16,}"
        }
        "ModSecurity" = @{
            Headers = @{
                "Server" = "mod_security|NOYB"
            }
            ErrorPage = "This error was generated by Mod_Security|ModSecurity Rules triggered|Mod_Security"
        }
        "Akamai" = @{
            Headers = @{
                "Server" = "AkamaiGHost"
                "X-Akamai-SSL-Client-Sid" = ".*"
            }
            Cookies = @{
                "akamaighost" = ".*"
            }
        }
        "Imperva SecureSphere" = @{
            Headers = @{
                "X-Iinfo" = ".*"
            }
            Cookies = @{
                "visid_incap" = ".*"
                "incap_ses" = ".*"
            }
            ErrorPage = "Powered by Incapsula|/_Incapsula_|subject=WAF Block Page"
        }
        "F5 BIG-IP ASM" = @{
            Headers = @{
                "Server" = "BIG-IP"
                "X-WA-Info" = ".*"
            }
            Cookies = @{
                "TS[a-zA-Z0-9]{3,8}" = ".*"
                "BIGipServer" = ".*"
            }
            ErrorPage = "The requested URL was rejected|Support ID: [0-9]+|because we have detected unauthorized activity"
        }
        "Barracuda" = @{
            Cookies = @{
                "barra_counter_session" = ".*"
            }
            ErrorPage = "You are being blocked by the Barracuda Web Application Firewall|Barracuda Networks"
        }
        "Sucuri" = @{
            Headers = @{
                "Server" = "Sucuri/Cloudproxy"
                "X-Sucuri-ID" = ".*"
            }
            ErrorPage = "Access Denied - Sucuri Website Firewall|Sucuri WebSite Firewall - CloudProxy - Access Denied"
        }
        "Fortinet" = @{
            Headers = @{
                "Set-Cookie" = "FORTIWAFSID=.*"
            }
            ErrorPage = "This page was generated by Fortinet|FortiWeb Web Application Firewall|FortiWeb Server"
        }
        "Wordfence" = @{
            ErrorPage = "This response was generated by Wordfence|Your access to this site has been limited by Wordfence"
        }
    }
}

function Test-ActiveDefense {
    param (
        [string]$Url
    )
    
    # Test malicious looking requests to trigger WAF
    $attackUrls = @(
        "$Url/?id=1' OR '1'='1",
        "$Url/?../../etc/passwd",
        "$Url/?<script>alert(1)</script>",
        "$Url/?exec=whoami",
        "$Url/?cmd=dir",
        "$Url/?user_id=-1 UNION SELECT 1,2,3"
    )
    
    $results = @()
    $attackUrlsResults = @{}
    
    Write-Host "Testing WAF active defense with malicious-looking requests..." -ForegroundColor Yellow
    
    foreach ($attackUrl in $attackUrls) {
        try {
            $response = Get-WebContent -Url $attackUrl
            
            if ($response) {
                $attackUrlsResults[$attackUrl] = @{
                    StatusCode = $response.StatusCode
                    BlockDetected = ($response.StatusCode -eq 403 -or 
                                     $response.StatusCode -eq 406 -or 
                                     $response.StatusCode -eq 429 -or 
                                     $response.StatusCode -eq 503 -or
                                     $response.Content -match "blocked|firewall|attack|malicious|suspicious|security|waf|forbidden")
                }
                
                $status = if ($attackUrlsResults[$attackUrl].BlockDetected) { "BLOCKED" } else { "PASSED" }
                Write-Host "  Attack URL: $($attackUrl.Substring(0, [Math]::Min(60, $attackUrl.Length)))... - Status: $($response.StatusCode) - $status" -ForegroundColor $(if ($status -eq "BLOCKED") { "Green" } else { "Magenta" })
                
                $results += $attackUrlsResults[$attackUrl]
            }
        }
        catch {
            Write-Warning "Failed testing attack URL: $attackUrl"
        }
    }
    
    # Calculate percentage of blocked requests
    $blockedCount = ($results | Where-Object { $_.BlockDetected -eq $true } | Measure-Object).Count
    $totalCount = $results.Count
    $blockPercentage = if ($totalCount -gt 0) { [math]::Round(($blockedCount / $totalCount) * 100, 1) } else { 0 }
    
    return @{
        Detected = ($blockPercentage -gt 30) # If more than 30% of attack requests were blocked
        BlockPercentage = $blockPercentage
        BlockedCount = $blockedCount
        TotalCount = $totalCount
        Details = $attackUrlsResults
    }
}

function Detect-WAF {
    param (
        [string]$Url
    )
    
    if (-not (Test-Url -Url $Url)) {
        return
    }
    
    Write-Host "`n===================================================================" -ForegroundColor Cyan
    Write-Host "  WAF Detector - Scanning $Url" -ForegroundColor Cyan
    Write-Host "===================================================================" -ForegroundColor Cyan
    
    Write-Host "`nFetching initial page content..." -ForegroundColor Yellow
    $response = Get-WebContent -Url $Url
    
    if (-not $response) {
        Write-Error "Failed to fetch the website. Please check the URL and try again."
        return
    }
    
    Write-Host "Response received: HTTP $($response.StatusCode)" -ForegroundColor Green
    
    # Initialize WAF detection results
    $wafDetectionResults = @{
        Url = $Url
        WafDetected = $false
        IdentifiedWafs = @()
        PossibleWafs = @()
        Headers = $response.Headers
        HttpStatus = $response.StatusCode
        ScanTimestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        ActiveDefense = $null
        ConfidenceScore = 0
    }
    
    # Check for WAF signatures
    $wafSignatures = Get-WafSignatures
    $contentString = $response.Content

    Write-Host "`nAnalyzing response for WAF signatures..." -ForegroundColor Yellow
    
    foreach ($wafName in $wafSignatures.Keys) {
        $wafInfo = $wafSignatures[$wafName]
        $detected = $false
        $reasons = @()
        
        # Check headers
        if ($wafInfo.Headers) {
            foreach ($headerName in $wafInfo.Headers.Keys) {
                $pattern = $wafInfo.Headers[$headerName]
                foreach ($respHeader in $response.Headers.Keys) {
                    if ($respHeader -match $headerName -and $response.Headers[$respHeader] -match $pattern) {
                        $detected = $true
                        $reasons += "Header match: $respHeader"
                    }
                }
            }
        }
        
        # Check cookies
        if ($wafInfo.Cookies -and $response.Headers.ContainsKey("Set-Cookie")) {
            $cookieHeader = $response.Headers["Set-Cookie"]
            foreach ($cookieName in $wafInfo.Cookies.Keys) {
                $pattern = $wafInfo.Cookies[$cookieName]
                if ($cookieHeader -match "$cookieName=$pattern") {
                    $detected = $true
                    $reasons += "Cookie match: $cookieName"
                }
            }
        }
        
        # Check error page content
        if ($wafInfo.ErrorPage -and $contentString -match $wafInfo.ErrorPage) {
            $detected = $true
            $reasons += "Error page signature match"
        }
        
        if ($detected) {
            $wafDetectionResults.WafDetected = $true
            $wafDetectionResults.IdentifiedWafs += @{
                Name = $wafName
                Confidence = "High"
                Reasons = $reasons
            }
            
            Write-Host "  [+] Detected: $wafName" -ForegroundColor Green
            foreach ($reason in $reasons) {
                Write-Host "      - $reason" -ForegroundColor Gray
            }
        }
    }
    
    # Test WAF's active defense by sending malicious requests
    Write-Host "`nTesting WAF active defense mechanisms..." -ForegroundColor Yellow
    $activeDefenseResults = Test-ActiveDefense -Url $Url
    $wafDetectionResults.ActiveDefense = $activeDefenseResults
    
    if ($activeDefenseResults.Detected) {
        Write-Host "  [+] Active WAF defense detected! $($activeDefenseResults.BlockedCount) of $($activeDefenseResults.TotalCount) attack requests were blocked ($($activeDefenseResults.BlockPercentage)%)" -ForegroundColor Green
        
        if (-not $wafDetectionResults.WafDetected) {
            Write-Host "  [!] WAF signature wasn't detected, but active defense indicates a WAF is present" -ForegroundColor Yellow
            $wafDetectionResults.WafDetected = $true
            $wafDetectionResults.PossibleWafs += "Unknown WAF (detected by behavior)"
        }
    }
    else {
        Write-Host "  [-] No active WAF defense detected. Only $($activeDefenseResults.BlockPercentage)% of attack requests were blocked." -ForegroundColor Magenta
    }
    
    # Check for common security headers
    Write-Host "`nChecking for security headers..." -ForegroundColor Yellow
    $securityHeaders = @(
        "Content-Security-Policy",
        "X-XSS-Protection",
        "X-Content-Type-Options",
        "X-Frame-Options",
        "Strict-Transport-Security",
        "X-Powered-By",
        "Server"
    )
    
    $securityHeadersFound = @()
    foreach ($header in $securityHeaders) {
        if ($response.Headers.ContainsKey($header)) {
            $value = $response.Headers[$header]
            $securityHeadersFound += @{
                Name = $header
                Value = $value
            }
            Write-Host "  [+] Security header: $header = $value" -ForegroundColor Green
        }
    }
    $wafDetectionResults.SecurityHeaders = $securityHeadersFound
    
    # Calculate confidence score
    $confidenceScore = 0
    if ($wafDetectionResults.IdentifiedWafs.Count -gt 0) {
        $confidenceScore += 60  # We identified specific WAFs
    }
    if ($activeDefenseResults.Detected) {
        $confidenceScore += 30  # Active defense was detected
    }
    if ($securityHeadersFound.Count -gt 2) {
        $confidenceScore += 10  # Multiple security headers present
    }
    $wafDetectionResults.ConfidenceScore = [Math]::Min(100, $confidenceScore)
    
    # Summary
    Write-Host "`n===================================================================" -ForegroundColor Cyan
    Write-Host "  SCAN RESULTS SUMMARY" -ForegroundColor Cyan
    Write-Host "===================================================================" -ForegroundColor Cyan
    
    if ($wafDetectionResults.WafDetected) {
        Write-Host "`n[+] WAF DETECTED with $($wafDetectionResults.ConfidenceScore)% confidence" -ForegroundColor Green
        
        if ($wafDetectionResults.IdentifiedWafs.Count -gt 0) {
            Write-Host "`nIdentified WAF Products:" -ForegroundColor Yellow
            foreach ($waf in $wafDetectionResults.IdentifiedWafs) {
                Write-Host "  - $($waf.Name) (Confidence: $($waf.Confidence))" -ForegroundColor Green
            }
        }
        
        if ($wafDetectionResults.PossibleWafs.Count -gt 0) {
            Write-Host "`nPossible Additional WAFs:" -ForegroundColor Yellow
            foreach ($waf in $wafDetectionResults.PossibleWafs) {
                Write-Host "  - $waf" -ForegroundColor Magenta
            }
        }
    }
    else {
        Write-Host "`n[-] NO WAF DETECTED" -ForegroundColor Magenta
        Write-Host "`nThe site may still be using a security solution that wasn't detected. Consider manual testing." -ForegroundColor Yellow
    }
    
    Write-Host "`nActive Defense Test:" -ForegroundColor Yellow
    Write-Host "  - Blocked $($activeDefenseResults.BlockedCount) of $($activeDefenseResults.TotalCount) malicious requests ($($activeDefenseResults.BlockPercentage)%)" -ForegroundColor $(if ($activeDefenseResults.Detected) { "Green" } else { "Magenta" })
    
    Write-Host "`nSecurity Headers:" -ForegroundColor Yellow
    Write-Host "  - Found $($securityHeadersFound.Count) security-related headers" -ForegroundColor $(if ($securityHeadersFound.Count -gt 2) { "Green" } else { "Magenta" })
    
    # Return results object
    if ($OutputFile) {
        $wafDetectionResults | ConvertTo-Json -Depth 10 | Out-File -FilePath $OutputFile
        Write-Host "`nResults saved to: $OutputFile" -ForegroundColor Green
    }
    
    return $wafDetectionResults
}

# Main execution
Detect-WAF -Url $Url